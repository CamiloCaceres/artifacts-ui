This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-14T17:21:28.994Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
.npmrc
app.config.ts
app.vue
components/CharacterInfo.vue
components/CooldownDisplay.vue
components/CraftingCycleManager.vue
components/GameLogin.vue
composables/useCharacter.js
composables/useCooldown.js
composables/useGameActions.js
nuxt.config.ts
package.json
pages/index.vue
README.md
server/tsconfig.json
stores/character.js
stores/cooldown.js
stores/gameAuth.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# Nuxt dev/build outputs
.output
.data
.nuxt
.nitro
.cache
dist

# Node dependencies
node_modules

# Logs
logs
*.log

# Misc
.DS_Store
.fleet
.idea

# Local env files
.env
.env.*
!.env.example

================
File: .npmrc
================
shamefully-hoist=true
strict-peer-dependencies=false

================
File: app.config.ts
================
export default defineAppConfig({
  ui: {
    primary: 'lime',
    gray: 'neutral',
  }
})

================
File: app.vue
================
<template>
  <UContainer>
    <NuxtPage />
  </UContainer>
</template>

================
File: components/CharacterInfo.vue
================
<template>
  <div class="bg-gray-800 rounded-lg p-6 text-white shadow-lg">
    <h1 class="text-2xl font-bold text-yellow-400 mb-6">{{ character.name }}</h1>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div class="bg-gray-700 p-4 rounded-lg">
        <span class="text-gray-400 text-sm block mb-1">Level</span>
        <span class="text-lg font-medium">{{ character.level }}</span>
      </div>
      
      <div class="bg-gray-700 p-4 rounded-lg">
        <span class="text-gray-400 text-sm block mb-1">HP</span>
        <span class="text-lg font-medium">{{ character.hp }}/{{ character.maxHp }}</span>
        <div class="mt-2 bg-gray-600 rounded-full h-2">
          <div 
            class="bg-red-500 h-2 rounded-full transition-all duration-300"
            :style="{ width: `${hpPercentage}%` }"
          ></div>
        </div>
      </div>

      <div class="bg-gray-700 p-4 rounded-lg">
        <span class="text-gray-400 text-sm block mb-1">Position</span>
        <span class="text-lg font-medium">
          X: {{ character.position.x }}, Y: {{ character.position.y }}
        </span>
      </div>

      <div class="bg-gray-700 p-4 rounded-lg">
        <span class="text-gray-400 text-sm block mb-1">Account</span>
        <span class="text-lg font-medium">{{ character.account }}</span>
      </div>
    </div>
  </div>
</template>

<script setup>
import { computed } from 'vue'
import { useCharacterStore } from '../stores/character'

const character = useCharacterStore()

const hpPercentage = computed(() => {
  return (character.hp / character.maxHp) * 100
})
</script>

================
File: components/CooldownDisplay.vue
================
<template>
  <div v-if="isInCooldown" class="bg-gray-100 p-2 rounded-md">
    <div class="flex justify-between items-center">
      <span class="font-medium">Cooldown</span>
      <span class="text-blue-600">{{ remainingSeconds }}s</span>
    </div>
    <div class="w-full bg-gray-200 h-2 rounded-full mt-1">
      <div class="bg-blue-500 h-2 rounded-full transition-all duration-1000"
           :style="`width: ${progress}%`">
      </div>
    </div>
  </div>
</template>

<script setup>
import { useCooldown } from '~/composables/useCooldown'

const { isInCooldown, remainingSeconds, progress } = useCooldown()
</script>

================
File: components/CraftingCycleManager.vue
================
<template>
    <div class="crafting-cycles p-4">
      <h2 class="text-xl font-bold mb-4">Crafting Cycle Manager</h2>
      
      <!-- Cycle List -->
      <div class="mb-6">
        <h3 class="text-lg font-semibold mb-2">Saved Cycles</h3>
        <div v-if="savedCycles.length" class="space-y-2">
          <div v-for="(cycle, index) in savedCycles" :key="index" 
               class="border p-3 rounded-lg flex justify-between items-center">
            <div>
              <span class="font-medium">{{ cycle.name }}</span>
              <span class="text-sm text-gray-600 ml-2">
                ({{ cycle.steps.length }} steps)
              </span>
            </div>
            <div class="space-x-2">
              <button @click="loadCycle(cycle)" 
                      class="px-3 py-1 bg-blue-500 text-white rounded-md hover:bg-blue-600">
                Load
              </button>
              <input v-model.number="cycle.repeatCount" 
                     type="number"
                     min="1"
                     class="px-2 py-1 border rounded-md w-16"
                     placeholder="Times"/>
              <button @click="runSavedCycle(cycle)" 
                      :disabled="loading"
                      class="px-3 py-1 bg-green-500 text-white rounded-md hover:bg-green-600 disabled:opacity-50">
                {{ loading ? 'Running...' : 'Run' }}
              </button>
              <button @click="deleteCycle(index)"
                      class="px-3 py-1 bg-red-500 text-white rounded-md hover:bg-red-600">
                Delete
              </button>
            </div>
          </div>
        </div>
        <p v-else class="text-gray-500">No saved cycles yet</p>
      </div>
  
      <!-- Cycle Editor -->
      <div class="border rounded-lg p-4">
        <h3 class="text-lg font-semibold mb-4">Create/Edit Cycle</h3>
        
        <!-- Cycle Name -->
        <div class="mb-4">
          <label class="block text-sm font-medium mb-1">Cycle Name</label>
          <input v-model="currentCycle.name" 
                 type="text"
                 class="w-full px-3 py-2 border rounded-md" 
                 placeholder="Enter cycle name"/>
        </div>
  
        <!-- Steps Editor -->
        <div class="mb-4">
          <label class="block text-sm font-medium mb-2">Steps</label>
          <div v-for="(step, index) in currentCycle.steps" 
               :key="index"
               class="flex gap-2 mb-2">
            <select v-model="step.action" 
                    class="px-3 py-2 border rounded-md">
              <option value="withdraw">Withdraw from Bank</option>
              <option value="deposit">Deposit to Bank</option>
              <option value="craft">Craft</option>
              <option value="move">Move</option>
            </select>
  
            <!-- Action-specific inputs -->
            <template v-if="['withdraw', 'deposit', 'craft'].includes(step.action)">
              <input v-model="step.item" 
                     type="text"
                     class="px-3 py-2 border rounded-md"
                     placeholder="Item code"/>
              <input v-model.number="step.quantity" 
                     type="number"
                     class="px-3 py-2 border rounded-md w-24"
                     placeholder="Qty"/>
            </template>
  
            <template v-if="step.action === 'move'">
              <select v-model="step.location" 
                      class="px-3 py-2 border rounded-md">
                <option value="bank">Bank</option>
                <option value="woodcutting">Woodcutting</option>
                <option value="mining">Mining</option>
              </select>
            </template>
  
            <button @click="removeStep(index)"
                    class="px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600">
              Remove
            </button>
          </div>
  
          <button @click="addStep"
                  class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
            Add Step
          </button>
        </div>
  
        <!-- Save/Run Controls -->
        <div class="flex gap-2 items-center">
          <button @click="saveCycle"
                  :disabled="!currentCycle.name || !currentCycle.steps.length"
                  class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 disabled:opacity-50">
            Save Cycle
          </button>
          <div class="flex items-center gap-2">
            <input v-model.number="repeatCount" 
                   type="number"
                   min="1"
                   class="px-3 py-2 border rounded-md w-20"
                   placeholder="Times"/>
            <button @click="runCurrentCycle"
                    :disabled="loading || !currentCycle.steps.length"
                    class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:opacity-50">
              {{ loading ? 'Running...' : 'Run Current Cycle' }}
            </button>
          </div>
        </div>
      </div>
  
      <!-- Error Display -->
      <div v-if="error" class="mt-4 p-3 bg-red-100 text-red-700 rounded-md">
        {{ error }}
      </div>
    </div>
  </template>
  
  <script setup>
  import { ref, reactive } from 'vue'
  import { useGameActions } from '~/composables/useGameActions'
  
  const {
    loading,
    error,
    withdrawFromBank,
    depositToBank,
    craft,
    moveToBank,
    moveToWoodcutting,
    moveToMining
  } = useGameActions()
  
  // State
  const savedCycles = ref([])
  const currentCycle = reactive({
    name: '',
    steps: []
  })
  
  // Add new state
  const repeatCount = ref(1)
  
  // Movement map
  const locationMoves = {
    bank: moveToBank,
    woodcutting: moveToWoodcutting,
    mining: moveToMining
  }
  
  // Add empty step
  const addStep = () => {
    currentCycle.steps.push({
      action: 'withdraw',
      item: '',
      quantity: 1,
      location: 'bank'
    })
  }
  
  // Remove step at index
  const removeStep = (index) => {
    currentCycle.steps.splice(index, 1)
  }
  
  // Save current cycle
  const saveCycle = () => {
    if (!currentCycle.name || !currentCycle.steps.length) return
    
    const cycleIndex = savedCycles.value.findIndex(c => c.name === currentCycle.name)
    
    if (cycleIndex >= 0) {
      savedCycles.value[cycleIndex] = JSON.parse(JSON.stringify(currentCycle))
    } else {
      savedCycles.value.push(JSON.parse(JSON.stringify(currentCycle)))
    }
    
    // Reset current cycle
    currentCycle.name = ''
    currentCycle.steps = []
  }
  
  // Load saved cycle for editing
  const loadCycle = (cycle) => {
    currentCycle.name = cycle.name
    currentCycle.steps = JSON.parse(JSON.stringify(cycle.steps))
  }
  
  // Delete saved cycle
  const deleteCycle = (index) => {
    savedCycles.value.splice(index, 1)
  }
  
  // Execute a single step
  const executeStep = async (step) => {
    switch (step.action) {
      case 'withdraw':
        await withdrawFromBank(step.item, step.quantity)
        break
      case 'deposit':
        await depositToBank(step.item, step.quantity)
        break
      case 'craft':
        await craft(step.item, step.quantity)
        break
      case 'move':
        await locationMoves[step.location]()
        break
    }
  }
  
  // Run current cycle
  const runCurrentCycle = async () => {
    if (!currentCycle.steps.length) return
    
    try {
      for (let i = 0; i < repeatCount.value; i++) {
        for (const step of currentCycle.steps) {
          await executeStep(step)
        }
      }
    } catch (err) {
      console.error('Error running cycle:', err)
    }
  }
  
  // Run saved cycle
  const runSavedCycle = async (cycle) => {
    try {
      const times = cycle.repeatCount || 1
      for (let i = 0; i < times; i++) {
        for (const step of cycle.steps) {
          await executeStep(step)
        }
      }
    } catch (err) {
      console.error('Error running saved cycle:', err)
    }
  }
  </script>

================
File: components/GameLogin.vue
================
<!-- components/GameLogin.vue -->
<template>
    <div class="max-w-md mx-auto p-6 bg-white rounded-lg shadow-md">
      <h2 class="text-2xl font-bold mb-6">Game Connection</h2>
      
      <form @submit.prevent="handleSubmit" class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700">Game Token</label>
          <input 
            v-model="token" 
            type="password"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            placeholder="Enter your game token"
            required
          />
        </div>
  
        <div>
          <label class="block text-sm font-medium text-gray-700">Character Name</label>
          <input 
            v-model="characterName"
            type="text"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            placeholder="Enter your character name"
            required
          />
        </div>
  
        <button 
          type="submit"
          class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Connect
        </button>
      </form>
  
      <div v-if="error" class="mt-4 text-red-600 text-sm">
        {{ error }}
      </div>
    </div>
  </template>
  
  <script setup>
  import { ref } from 'vue'
  import { useGameAuth } from '~/stores/gameAuth'
  import { useRouter } from 'vue-router'
  import { useCharacter } from '~/composables/useCharacter'
  const gameAuth = useGameAuth()
  const router = useRouter()
  const { fetchCharacterInfo } = useCharacter()
  const token = ref('')
  const characterName = ref('')
  const error = ref('')
  
  const handleSubmit = async () => {
    try {
      error.value = ''
      gameAuth.setCredentials(token.value, characterName.value)
      
      // You might want to validate the credentials here
      // by making a test API call
      
      // Redirect to game dashboard
      fetchCharacterInfo()
    
    } catch (err) {
      error.value = 'Failed to connect. Please check your credentials.'
      gameAuth.clearCredentials()
    }
  }
  </script>

================
File: composables/useCharacter.js
================
import { useGameAuth } from '~/stores/gameAuth'
import { useCharacterStore } from '~/stores/character'

export const useCharacter = () => {
  const gameAuth = useGameAuth()
  const characterStore = useCharacterStore()
  const loading = ref(false)
  const error = ref(null)

  const fetchCharacterInfo = async () => {
    if (!gameAuth.isAuthenticated) {
      throw new Error('Not authenticated')
    }

    loading.value = true
    error.value = null

    try {
      const response = await fetch(
        `${gameAuth.serverUrl}/characters/${gameAuth.characterName}`,
        {
          headers: {
            'Accept': 'application/json',
            'Authorization': `Bearer ${gameAuth.token}`
          }
        }
      )

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const { data } = await response.json()
      characterStore.updateCharacter(data)
      return data
    } catch (err) {
      error.value = err.message
      throw err
    } finally {
      loading.value = false
    }
  }

  return {
    loading,
    error,
    fetchCharacterInfo,
    character: characterStore
  }
}

================
File: composables/useCooldown.js
================
// composables/useCooldown.js
import { computed } from 'vue'
import { useCooldownStore } from '@/stores/cooldown'

export const useCooldown = () => {
  const cooldownStore = useCooldownStore()
  let timer = null
  
  // Computed properties for the UI
  const isInCooldown = computed(() => cooldownStore.cooldown_expiration !== null)
  const remainingSeconds = computed(() => {
    if (!cooldownStore.cooldown_expiration) return 0
    const now = new Date()
    const remaining = Math.max(0, Math.ceil(
      (new Date(cooldownStore.cooldown_expiration) - now) / 1000
    ))
    if (remaining === 0) {
      cooldownStore.setCooldown({ expiration: null })
      if (timer) {
        clearInterval(timer)
        timer = null
      }
    }
    return remaining
  })
  
  // Progress percentage for UI
  const progress = computed(() => {
    if (!cooldownStore.cooldown_expiration || !cooldownStore.total_seconds) return 0
    return Math.min(100, (remainingSeconds.value / cooldownStore.total_seconds) * 100)
  })

  // Set new cooldown
  const setCooldown = (cooldown) => {
    if (!cooldown) return
    cooldownStore.setCooldown(cooldown)
    startCooldownTimer()
  }

  // Start countdown timer
  const startCooldownTimer = () => {
    if (timer) clearInterval(timer)
    timer = setInterval(() => {
      cooldownStore.$patch({ })
    }, 1000)
  }

  return {
    isInCooldown,
    remainingSeconds,
    progress,
    setCooldown
  }
}

================
File: composables/useGameActions.js
================
// composables/useGameActions.js
import { ref } from 'vue'
import { useGameAuth } from '~/stores/gameAuth'
import { storeToRefs } from 'pinia'
import { useCharacterStore } from '~/stores/character'
import { useCooldown } from '~/composables/useCooldown'
import { useCooldownStore } from '~/stores/cooldown'

const { setCooldown } = useCooldown()



export const useGameActions = () => {
  const gameAuth = useGameAuth()
  const characterStore = useCharacterStore()
  const cooldownStore = useCooldownStore()
  const { token, characterName, serverUrl } = storeToRefs(gameAuth)
  
  const loading = ref(false)
  const error = ref(null)

  // Base configuration for API requests
  const getBaseConfig = () => ({
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'Authorization': `Bearer ${token.value}`
    }
  })

  // Utility function to handle API calls and cooldowns
  const makeRequest = async (url, options) => {
    if (!gameAuth.isAuthenticated) {
      throw new Error('Not authenticated')
    }

    loading.value = true
    error.value = null
    
    try {
      const response = await fetch(url, options)
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      
      const result = await response.json()
      characterStore.updateCharacter(result.data.character)
      
      if (!result.data) {
        throw new Error('No data received from server')
      }

      // Handle cooldown with new store
      if (result.data.cooldown) {
        setCooldown({
          expiration: result.data.cooldown.expiration,
          total_seconds: result.data.cooldown.remaining_seconds
        })
        await new Promise((resolve) => 
          setTimeout(resolve, (result.data.cooldown.remaining_seconds + 1) * 1000)
        )
      }

      return result.data
    } catch (err) {
      error.value = err.message
      if (err.message.includes('401')) {
        gameAuth.clearCredentials()
      }
      await new Promise((resolve) => setTimeout(resolve, 5000))
      throw err
    } finally {
      loading.value = false
    }
  }

  // Crafting action
  const craft = async (item, quantity) => {
    return makeRequest(
      `${serverUrl.value}/my/${characterName.value}/action/crafting`,
      {
        ...getBaseConfig(),
        method: 'POST',
        body: JSON.stringify({ code: item, quantity })
      }
    )
  }

  // Bank withdrawal action
  const withdrawFromBank = async (item, quantity) => {
    return makeRequest(
      `${serverUrl.value}/my/${characterName.value}/action/bank/withdraw`,
      {
        ...getBaseConfig(),
        method: 'POST',
        body: JSON.stringify({ code: item, quantity })
      }
    )
  }

  // Bank deposit action
  const depositToBank = async (item, quantity) => {
    return makeRequest(
      `${serverUrl.value}/my/${characterName.value}/action/bank/deposit`,
      {
        ...getBaseConfig(),
        method: 'POST',
        body: JSON.stringify({ code: item, quantity })
      }
    )
  }

  // Generic move action
  const moveCharacter = async (x, y) => {
    return makeRequest(
      `${serverUrl.value}/my/${characterName.value}/action/move`,
      {
        ...getBaseConfig(),
        method: 'POST',
        body: JSON.stringify({ x, y })
      }
    )
  }

  // Predefined location moves
  const moveToBank = () => moveCharacter(4, 1)
  const moveToWoodcutting = () => moveCharacter(-2, -3)
  const moveToMining = () => moveCharacter(1, 5)

  // Recycle action
  const recycle = async (item, quantity) => {
    return makeRequest(
      `${serverUrl.value}/my/${characterName.value}/action/recycling`,
      {
        ...getBaseConfig(),
        method: 'POST',
        body: JSON.stringify({ code: item, quantity })
      }
    )
  }

  return {
    loading,
    error,
    craft,
    withdrawFromBank,
    depositToBank,
    moveCharacter,
    moveToBank,
    moveToWoodcutting,
    moveToMining,
    recycle
  }
}

================
File: nuxt.config.ts
================
// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  devtools: { enabled: true },
  modules: ["@nuxt/ui", "@pinia/nuxt", 'pinia-plugin-persistedstate/nuxt']
})

================
File: package.json
================
{
  "name": "nuxt-app",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "nuxt build",
    "dev": "nuxt dev",
    "generate": "nuxt generate",
    "preview": "nuxt preview",
    "postinstall": "nuxt prepare"
  },
  "devDependencies": {
    "@nuxt/devtools": "latest",
    "@nuxt/ui": "^2.19.2",
    "nuxt": "^3.14.159"
  },
  "dependencies": {
    "@pinia/nuxt": "^0.7.0",
    "pinia": "^2.2.6",
    "pinia-plugin-persistedstate": "^4.1.3"
  }
}

================
File: pages/index.vue
================
<template>
  <div>
    <h1>Home</h1>
    <GameLogin v-if="!isAuthenticated" />

    {{ isAuthenticated }}
    <CooldownDisplay />
    <CraftingCycleManager />
   <CharacterInfo />

    <UButton @click="moveToBank">Move to Bank</UButton>
  </div>
</template>

<script setup>
import GameLogin from '~/components/GameLogin.vue';
import { useGameActions } from '~/composables/useGameActions'

const { moveCharacter, moveToBank } = useGameActions()

const gameAuth = useGameAuth()
const { isAuthenticated } = storeToRefs(gameAuth)
const character = useCharacterStore()


</script>

================
File: README.md
================
# Nuxt UI Minimal Starter

Look at [Nuxt docs](https://nuxt.com/docs/getting-started/introduction) and [Nuxt UI docs](https://ui.nuxt.com) to learn more.

## Setup

Make sure to install the dependencies:

```bash
# npm
npm install

# pnpm
pnpm install

# yarn
yarn install

# bun
bun install
```

## Development Server

Start the development server on `http://localhost:3000`:

```bash
# npm
npm run dev

# pnpm
pnpm run dev

# yarn
yarn dev

# bun
bun run dev
```

## Production

Build the application for production:

```bash
# npm
npm run build

# pnpm
pnpm run build

# yarn
yarn build

# bun
bun run build
```

Locally preview production build:

```bash
# npm
npm run preview

# pnpm
pnpm run preview

# yarn
yarn preview

# bun
bun run preview
```

Check out the [deployment documentation](https://nuxt.com/docs/getting-started/deployment) for more information.

================
File: server/tsconfig.json
================
{
  "extends": "../.nuxt/tsconfig.server.json"
}

================
File: stores/character.js
================
import { defineStore } from 'pinia'

export const useCharacterStore = defineStore('character', {
  state: () => ({
    name: '',
    account: '',
    level: 0,
    skin: '',
    hp: 0,
    maxHp: 0,
    position: { x: 0, y: 0 },
    lastUpdated: null,
  }),

  actions: {
    updateCharacter(data) {
      this.name = data.name
      this.account = data.account
      this.level = data.level
      this.skin = data.skin
      this.hp = data.hp
      this.maxHp = data.max_hp
      this.position = { x: data.x, y: data.y }
      this.lastUpdated = new Date()
    }
  }
})

================
File: stores/cooldown.js
================
import { defineStore } from 'pinia'

export const useCooldownStore = defineStore('cooldown', {
  state: () => ({
    cooldown_expiration: null,
    total_seconds: 0
  }),
  actions: {
    setCooldown(cooldown) {
      this.cooldown_expiration = cooldown.expiration
      this.total_seconds = cooldown.total_seconds
    }
  }

})

================
File: stores/gameAuth.js
================
// stores/gameAuth.js
import { defineStore } from 'pinia'

export const useGameAuth = defineStore('gameAuth', {
  state: () => ({
    token: '',
    characterName: '',
    isAuthenticated: false,
    serverUrl: 'https://api.artifactsmmo.com'
  }),

  actions: {
    setCredentials(token, characterName) {
      this.token = token
      this.characterName = characterName
      this.isAuthenticated = !!(token && characterName)
    },

    clearCredentials() {
      this.token = ''
      this.characterName = ''
      this.isAuthenticated = false
    }
  },
  persist: {
    storage: true
  }
})

================
File: tsconfig.json
================
{
  // https://nuxt.com/docs/guide/concepts/typescript
  "extends": "./.nuxt/tsconfig.json"
}
